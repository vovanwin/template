// Code generated by options-gen. DO NOT EDIT.
package postgres

import (
	fmt461e464ebed9 "fmt"
	"log/slog"

	errors461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/errors"
	validator461e464ebed9 "github.com/kazhuravlev/options-gen/pkg/validator"
)

type OptOptionsSetter func(o *Options)

func NewOptions(
	logger *slog.Logger,
	host string,
	user string,
	password string,
	db string,
	port string,
	scheme string,
	isProduction bool,
	options ...OptOptionsSetter,
) Options {
	o := Options{}

	// Setting defaults from field tag (if present)

	o.logger = logger
	o.host = host
	o.user = user
	o.password = password
	o.db = db
	o.port = port
	o.scheme = scheme
	o.isProduction = isProduction

	for _, opt := range options {
		opt(&o)
	}
	return o
}

func (o *Options) Validate() error {
	errs := new(errors461e464ebed9.ValidationErrors)
	errs.Add(errors461e464ebed9.NewValidationError("logger", _validate_Options_logger(o)))
	errs.Add(errors461e464ebed9.NewValidationError("host", _validate_Options_host(o)))
	errs.Add(errors461e464ebed9.NewValidationError("user", _validate_Options_user(o)))
	errs.Add(errors461e464ebed9.NewValidationError("password", _validate_Options_password(o)))
	errs.Add(errors461e464ebed9.NewValidationError("db", _validate_Options_db(o)))
	errs.Add(errors461e464ebed9.NewValidationError("port", _validate_Options_port(o)))
	errs.Add(errors461e464ebed9.NewValidationError("scheme", _validate_Options_scheme(o)))
	return errs.AsError()
}

func _validate_Options_logger(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.logger, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `logger` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_host(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.host, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `host` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_user(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.user, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `user` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_password(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.password, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `password` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_db(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.db, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `db` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_port(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.port, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `port` did not pass the test: %w", err)
	}
	return nil
}

func _validate_Options_scheme(o *Options) error {
	if err := validator461e464ebed9.GetValidatorFor(o).Var(o.scheme, "required"); err != nil {
		return fmt461e464ebed9.Errorf("field `scheme` did not pass the test: %w", err)
	}
	return nil
}
