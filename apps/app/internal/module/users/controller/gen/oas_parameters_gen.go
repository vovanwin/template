// Code generated by ogen, DO NOT EDIT.

package usersGenv1

import (
	"net/http"

	"github.com/google/uuid"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// AuthLoginPostParams is parameters of POST /auth/login operation.
type AuthLoginPostParams struct {
	// Уникальный идентификатор запроса (UUID) отправляется с
	// фронтенда для идентификации каждого запроса и
	// логирования соответствующих логов, относящихся к
	// данному запросу.
	XRequestID OptUUID
}

func unpackAuthLoginPostParams(packed middleware.Parameters) (params AuthLoginPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Request-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XRequestID = v.(OptUUID)
		}
	}
	return params
}

func decodeAuthLoginPostParams(args [0]string, argsEscaped bool, r *http.Request) (params AuthLoginPostParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Request-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Request-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXRequestIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotXRequestIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XRequestID.SetTo(paramsDotXRequestIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Request-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// AuthMeGetParams is parameters of GET /auth/me operation.
type AuthMeGetParams struct {
	// Уникальный идентификатор запроса (UUID) отправляется с
	// фронтенда для идентификации каждого запроса и
	// логирования соответствующих логов, относящихся к
	// данному запросу.
	XRequestID OptUUID
}

func unpackAuthMeGetParams(packed middleware.Parameters) (params AuthMeGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "X-Request-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XRequestID = v.(OptUUID)
		}
	}
	return params
}

func decodeAuthMeGetParams(args [0]string, argsEscaped bool, r *http.Request) (params AuthMeGetParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: X-Request-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Request-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXRequestIDVal uuid.UUID
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToUUID(val)
					if err != nil {
						return err
					}

					paramsDotXRequestIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XRequestID.SetTo(paramsDotXRequestIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Request-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
