package main

import "html/template"

var (
	headerTpl *template.Template
	bodyTpl   *template.Template
)

func init() {
	headerTpl = headerTemplate()
	bodyTpl = bodyTemplate()
}

func headerTemplate() *template.Template {
	return template.Must(template.New("header").Parse(`// Code generated by cmd/gen-types; DO NOT EDIT.
package {{.package}}

import (
	"database/sql/driver"
	"errors"

	"github.com/google/uuid"
)

func Parse[T {{.types}}](id string) (T, error) {
	uid, err := uuid.Parse(id)
	if err != nil {
		return T(uuid.Nil), err
	}
	return T(uid), nil
}

func MustParse[T {{.types}}](id string) T {
	uid, err := uuid.Parse(id)
	if err != nil {
		panic(err)
	}
	return T(uid)
}
`))
}

func bodyTemplate() *template.Template {
	return template.Must(template.New("body").Parse(`
type {{.}} uuid.UUID

var {{.}}Nil = {{.}}(uuid.Nil)

func New{{.}}() {{.}} {
	return {{.}}(uuid.New())
}

func (c {{.}}) MarshalText() (text []byte, err error) {
	return uuid.UUID(c).MarshalText()
}

func (c *{{.}}) UnmarshalText(text []byte) error {
	return (*uuid.UUID)(c).UnmarshalText(text)
}

func (c {{.}}) Value() (driver.Value, error) {
	return c.String(), nil
}

func (c *{{.}}) Scan(src any) error {
	return (*uuid.UUID)(c).Scan(src)
}

func (c {{.}}) Validate() error {
	if c.IsZero() {
		return errors.New("zero {{.}}")
	}
	return nil
}

func (c {{.}}) Matches(x interface{}) bool {
	return c == x
}

// String describes what the matcher matches.
func (c {{.}}) String() string {
	return uuid.UUID(c).String()
}

func (c {{.}}) IsZero() bool {
	return c == {{.}}Nil
}
`))
}
