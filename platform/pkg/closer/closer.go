package closer

import (
	"context"
	"errors"
	"fmt"
	"os"
	"os/signal"
	"sync"
	"time"

	"go.uber.org/zap"

	"github.com/vovanwin/platform/pkg/logger"
)

// shutdownTimeout –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
const shutdownTimeout = 5 * time.Second

type Logger interface {
	Info(ctx context.Context, msg string, fields ...zap.Field)
	Error(ctx context.Context, msg string, fields ...zap.Field)
}

// Closer —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ–º graceful shutdown –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
type Closer struct {
	mu     sync.Mutex                    // –ó–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
	once   sync.Once                     // –ì–∞—Ä–∞–Ω—Ç–∏—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ CloseAll
	done   chan struct{}                 // –ö–∞–Ω–∞–ª –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	funcs  []func(context.Context) error // –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
	logger Logger                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ª–æ–≥–≥–µ—Ä
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
var globalCloser = NewWithLogger(&logger.NoopLogger{})

// AddNamed –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è —Å –∏–º–µ–Ω–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π closer
func AddNamed(name string, f func(context.Context) error) {
	globalCloser.AddNamed(name, f)
}

// Add –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π closer
func Add(f ...func(context.Context) error) {
	globalCloser.Add(f...)
}

// CloseAll –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ closer'–∞
func CloseAll(ctx context.Context) error {
	return globalCloser.CloseAll(ctx)
}

// SetLogger –ø–æ–∑–≤–æ–ª—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ closer'–∞
func SetLogger(l Logger) {
	globalCloser.SetLogger(l)
}

// Configure –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π closer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
func Configure(signals ...os.Signal) {
	go globalCloser.handleSignals(signals...)
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Closer —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –ª–æ–≥–≥–µ—Ä–æ–º log.Default()
func New(signals ...os.Signal) *Closer {
	return NewWithLogger(logger.Logger(), signals...)
}

// NewWithLogger —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Closer —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ª–æ–≥–≥–µ—Ä–∞.
// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–∏–≥–Ω–∞–ª—ã, Closer –Ω–∞—á–Ω—ë—Ç –∏—Ö —Å–ª—É—à–∞—Ç—å –∏ –≤—ã–∑–æ–≤–µ—Ç CloseAll –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.
func NewWithLogger(logger Logger, signals ...os.Signal) *Closer {
	c := &Closer{
		done:   make(chan struct{}),
		logger: logger,
	}

	if len(signals) > 0 {
		go c.handleSignals(signals...)
	}

	return c
}

// SetLogger —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è Closer
func (c *Closer) SetLogger(l Logger) {
	c.logger = l
}

// handleSignals –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∏ –≤—ã–∑—ã–≤–∞–µ—Ç CloseAll —Å fresh shutdown context
func (c *Closer) handleSignals(signals ...os.Signal) {
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, signals...)
	defer signal.Stop(ch)

	select {
	case <-ch:
		c.logger.Info(context.Background(), "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–∏–≥–Ω–∞–ª, –Ω–∞—á–∏–Ω–∞–µ–º graceful shutdown...")

		shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), shutdownTimeout)
		defer shutdownCancel()

		if err := c.CloseAll(shutdownCtx); err != nil {
			c.logger.Error(context.Background(), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: %v", zap.Error(err))
		}

	case <-c.done:
		// CloseAll —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤—Ä—É—á–Ω—É—é, –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
	}
}

// AddNamed –¥–æ–±–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–∫—Ä—ã—Ç–∏—è —Å –∏–º–µ–Ω–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func (c *Closer) AddNamed(name string, f func(context.Context) error) {
	c.Add(
		func(ctx context.Context) error {
			start := time.Now()
			c.logger.Info(ctx, fmt.Sprintf("üß© –ó–∞–∫—Ä—ã–≤–∞–µ–º %s...", name))

			err := f(ctx)

			duration := time.Since(start)
			if err != nil {
				c.logger.Error(ctx, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ %s: %v (–∑–∞–Ω—è–ª–æ %s)", name, err, duration))
			} else {
				c.logger.Info(ctx, fmt.Sprintf("‚úÖ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç –∑–∞ %s", name, duration))
			}
			return err
		},
	)
}

// Add –¥–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π –∑–∞–∫—Ä—ã—Ç–∏—è
func (c *Closer) Add(f ...func(context.Context) error) {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.funcs = append(c.funcs, f...)
}

// CloseAll –≤—ã–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –≤–æ–∑–Ω–∏–∫—à—É—é –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–∞–∫–æ–≤–∞—è –±—ã–ª–∞.
func (c *Closer) CloseAll(ctx context.Context) error {
	var result error

	c.once.Do(
		func() {
			defer close(c.done)

			c.mu.Lock()
			funcs := c.funcs
			c.funcs = nil // –æ—Å–≤–æ–±–æ–¥–∏–º –ø–∞–º—è—Ç—å
			c.mu.Unlock()

			if len(funcs) == 0 {
				c.logger.Info(ctx, "‚ÑπÔ∏è –ù–µ—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è.")
				return
			}

			c.logger.Info(ctx, "üö¶ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å graceful shutdown...")

			errCh := make(chan error, len(funcs))
			var wg sync.WaitGroup

			// –í—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
			for i := len(funcs) - 1; i >= 0; i-- {
				f := funcs[i]
				wg.Add(1)
				go func(f func(context.Context) error) {
					defer wg.Done()

					// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–∞–Ω–∏–∫–∏
					defer func() {
						if r := recover(); r != nil {
							errCh <- errors.New("panic recovered in closer")
							c.logger.Error(ctx, "‚ö†Ô∏è Panic –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç–∏—è", zap.Any("error", r))
						}
					}()

					if err := f(ctx); err != nil {
						errCh <- err
					}
				}(f)
			}

			// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª –æ—à–∏–±–æ–∫, –∫–æ–≥–¥–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è
			go func() {
				wg.Wait()
				close(errCh)
			}()

			// –ß–∏—Ç–∞–µ–º –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
			for {
				select {
				case <-ctx.Done():
					c.logger.Info(ctx, "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω—ë–Ω –≤–æ –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è", zap.Error(ctx.Err()))
					if result == nil {
						result = ctx.Err()
					}
					return
				case err, ok := <-errCh:
					if !ok {
						c.logger.Info(ctx, "‚úÖ –í—Å–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã")
						return
					}
					c.logger.Error(ctx, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏", zap.Error(err))
					if result == nil {
						result = err
					}
				}
			}
		},
	)

	return result
}
