package dependency

import (
	"context"
	"encoding/json"
	"fmt"
	"net"
	"net/http"
	"path/filepath"
	"time"

	"github.com/jackc/pgx/v5/pgxpool"
	"github.com/vovanwin/template/app/config"
	customMiddleware "github.com/vovanwin/template/app/internal/shared/middleware"
	"github.com/vovanwin/template/app/pkg/httpserver"
	"github.com/vovanwin/template/app/pkg/jwt"
	"github.com/vovanwin/template/app/pkg/storage/postgres"

	"github.com/vovanwin/platform/pkg/temporal"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
	healthsvc "github.com/vovanwin/platform/pkg/grpc/health"
	"github.com/vovanwin/platform/pkg/logger"
	"go.uber.org/fx"
	"go.uber.org/zap"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

func ProvideConfig() (*config.Config, error) {
	return config.NewConfig()
}

// LogComponentsStatus –ª–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
func LogComponentsStatus(config *config.Config) {
	lg := logger.Named("components-status")
	lg.Info(context.Background(), "üöÄ Starting application components:")
	lg.Info(context.Background(), fmt.Sprintf("  ‚úÖ HTTP Server: %v (port: %s)", config.Server.EnableHTTP, config.Server.HTTPPort))
	lg.Info(context.Background(), fmt.Sprintf("  ‚úÖ gRPC Server: %v (port: %s)", config.Server.EnableGRPC, config.Server.GRPCPort))
	lg.Info(context.Background(), fmt.Sprintf("  ‚úÖ Debug Server: %v (port: %s)", config.Server.EnableDebug, config.Server.DebugPort))
	lg.Info(context.Background(), fmt.Sprintf("  ‚úÖ Swagger Server: %v (port: %s)", config.Server.EnableSwagger, config.Server.SwaggerPort))
	lg.Info(context.Background(), fmt.Sprintf("  ‚úÖ Temporal Service: %v (host: %s:%d)", config.Server.EnableTemporal, config.Temporal.Host, config.Temporal.Port))
}

func ProvideLogger(config *config.Config) error {
	err := logger.Init(config.Level, false)
	if err != nil {
		return err
	}
	return nil
}

// InitLogger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–≥–µ—Ä –¥–ª—è fx.Provide
func InitLogger(config *config.Config) *struct{} {
	err := logger.Init(config.Level, false)
	if err != nil {
		panic(err) // –í fx.Provide –ª—É—á—à–µ –ø–∞–Ω–∏–∫–æ–≤–∞—Ç—å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
	}
	return &struct{}{} // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
}

// ProvideJWTService —Å–æ–∑–¥–∞–µ—Ç JWT —Å–µ—Ä–≤–∏—Å
func ProvideJWTService(config *config.Config) jwt.JWTService {
	return jwt.NewJWTService(config.JWT.SignKey, config.JWT.TokenTTL, config.JWT.RefreshTTL)
}

func ProvideServer(lifecycle fx.Lifecycle, config *config.Config) (*chi.Mux, error) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ HTTP —Å–µ—Ä–≤–µ—Ä
	if !config.Server.EnableHTTP {
		lg := logger.Named("http-server")
		lg.Info(context.Background(), "HTTP —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
		return chi.NewRouter(), nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä
	}

	// –û–±—ä—è–≤–ª—è—é –Ω—É–∂–Ω—ã–µ –º–Ω–µ –º–∏–ª–¥–≤–∞—Ä—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
	// –°–æ–∑–¥–∞–µ–º rate limiter
	rateLimiter := customMiddleware.NewRateLimiter()

	middlewareCustom := func(r *chi.Mux) {
		r.Use(middleware.RequestID)

		// CORS –¥–ª—è Swagger UI –∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
		r.Use(
			cors.Handler(
				cors.Options{
					AllowedOrigins:   []string{"*"},
					AllowedMethods:   []string{"GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"},
					AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type"},
					ExposedHeaders:   []string{},
					AllowCredentials: false,
					MaxAge:           300, // 5 minutes
				},
			),
		)

		r.Use(middleware.Recoverer)
		r.Use(middleware.URLFormat)

		// Rate limiting (—Ä–∞–Ω—å—à–µ –¥—Ä—É–≥–∏—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)
		r.Use(rateLimiter.RateLimitMiddleware())

		// JWT –∑–∞—â–∏—Ç–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ ogen SecurityHandler

		r.Use(customMiddleware.MetricsMiddleware)
		r.Use(customMiddleware.TracingMiddleware)
	}

	opt := httpserver.NewOptions(
		net.JoinHostPort(config.Server.Host, config.Server.HTTPPort),
		config.ReadHeaderTimeout,
		httpserver.WithMiddlewareSetup(middlewareCustom),
	)
	router, server, err := httpserver.NewServer(opt)
	if err != nil {
		return nil, fmt.Errorf("create http server: %w", err)
	}
	lifecycle.Append(
		fx.Hook{
			OnStart: func(ctx context.Context) error {
				go func() {
					lg := logger.Named("http-server")
					lg.Info(context.Background(), fmt.Sprintf("HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", net.JoinHostPort(config.Server.Host, config.Server.HTTPPort)))
					if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
						lg.Error(context.Background(), "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
					}
				}()

				return nil
			},
			OnStop: func(ctx context.Context) error {
				lg := logger.Named("http-server")
				lg.Info(ctx, "HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
				shutdownCtx, cancel := context.WithTimeout(ctx, config.GracefulTimeout*time.Second)
				defer cancel()
				if err := server.Shutdown(shutdownCtx); err != nil {
					lg.Error(ctx, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
				}
				return nil
			},
		},
	)

	return router, nil
}

// ProvideDebugServer –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π debug/admin HTTP —Å–µ—Ä–≤–µ—Ä
func ProvideDebugServer(lifecycle fx.Lifecycle, config *config.Config) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Debug —Å–µ—Ä–≤–µ—Ä
	if !config.Server.EnableDebug {
		lg := logger.Named("debug-server")
		lg.Info(context.Background(), "Debug —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
		return nil
	}

	r := chi.NewRouter()
	r.Use(middleware.Recoverer)
	r.Use(middleware.RequestID)

	// –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
	r.Mount("/debug", middleware.Profiler())

	// Admin endpoints for runtime log level management
	r.Route(
		"/admin/log", func(r chi.Router) {
			r.Get(
				"/level", func(w http.ResponseWriter, r *http.Request) {
					_ = json.NewEncoder(w).Encode(map[string]string{"level": logger.Level()})
				},
			)
			r.Post(
				"/level", func(w http.ResponseWriter, r *http.Request) {
					var req struct {
						Level string `json:"level"`
					}
					if err := json.NewDecoder(r.Body).Decode(&req); err != nil || req.Level == "" {
						w.WriteHeader(http.StatusBadRequest)
						_ = json.NewEncoder(w).Encode(map[string]string{"error": "invalid level payload"})
						return
					}
					logger.SetLevel(req.Level)
					_ = json.NewEncoder(w).Encode(map[string]string{"level": logger.Level()})
				},
			)
		},
	)

	srv := &http.Server{
		Addr:    net.JoinHostPort(config.Server.Host, config.Server.DebugPort),
		Handler: r,
	}

	lifecycle.Append(
		fx.Hook{
			OnStart: func(ctx context.Context) error {
				go func() {
					lg := logger.Named("debug-server")
					lg.Info(context.Background(), fmt.Sprintf("Debug —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", net.JoinHostPort(config.Server.Host, config.Server.DebugPort)))
					if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
						lg.Error(context.Background(), "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ debug —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
					}
				}()
				return nil
			},
			OnStop: func(ctx context.Context) error {
				lg := logger.Named("debug-server")
				lg.Info(context.Background(), "Debug —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
				shutdownCtx, cancel := context.WithTimeout(ctx, config.GracefulTimeout*time.Second)
				defer cancel()
				return srv.Shutdown(shutdownCtx)
			},
		},
	)

	return nil
}

// ProvideSwaggerServer –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å–æ Swagger UI
func ProvideSwaggerServer(lifecycle fx.Lifecycle, config *config.Config) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Swagger —Å–µ—Ä–≤–µ—Ä
	if !config.Server.EnableSwagger {
		lg := logger.Named("swagger-server")
		lg.Info(context.Background(), "Swagger —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
		return nil
	}

	r := chi.NewRouter()

	// –†–∞–∑–¥–∞—ë–º –≤—Å—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–æ —Å–ø–µ–∫–∞–º–∏, —á—Ç–æ–±—ã $ref —Å—Å—ã–ª–∫–∏ —Ä–∞–±–æ—Ç–∞–ª–∏
	specDir := filepath.Join("..", "shared", "api", "app", "v1")
	fileServer := http.StripPrefix("/spec/", http.FileServer(http.Dir(specDir)))
	r.Handle("/spec/*", fileServer)

	// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Swagger UI —Å CDN, —É–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
	r.Get(
		"/", func(w http.ResponseWriter, req *http.Request) {
			w.Header().Set("Content-Type", "text/html; charset=utf-8")

			_, _ = w.Write(
				[]byte(`<!doctype html> <!-- Important: must specify -->
<html>
  <head>
    <meta charset="utf-8"> <!-- Important: rapi-doc uses utf8 characters -->
    <script type="module" src="https://unpkg.com/rapidoc/dist/rapidoc-min.js"></script>
  </head>
  <body>
    <rapi-doc
      spec-url = "/spec/app.v1.swagger.yml"
    > </rapi-doc>
  </body>
</html>`),
			)
		},
	)

	srv := &http.Server{
		Addr:    net.JoinHostPort(config.Server.Host, config.Server.SwaggerPort),
		Handler: r,
	}

	lifecycle.Append(
		fx.Hook{
			OnStart: func(ctx context.Context) error {
				go func() {
					lg := logger.Named("swagger-server")
					lg.Info(context.Background(), fmt.Sprintf("Swagger —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", net.JoinHostPort(config.Server.Host, config.Server.SwaggerPort)))
					if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
						lg.Error(context.Background(), "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ swagger —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
					}
				}()
				return nil
			},
			OnStop: func(ctx context.Context) error {
				lg := logger.Named("swagger-server")
				lg.Info(context.Background(), "Swagger —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
				shutdownCtx, cancel := context.WithTimeout(ctx, config.GracefulTimeout*time.Second)
				defer cancel()
				return srv.Shutdown(shutdownCtx)
			},
		},
	)

	return nil
}

// ProvideGRPCServer –∑–∞–ø—É—Å–∫–∞–µ—Ç gRPC —Å–µ—Ä–≤–µ—Ä
func ProvideGRPCServer(lifecycle fx.Lifecycle, config *config.Config) error {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ gRPC —Å–µ—Ä–≤–µ—Ä
	if !config.Server.EnableGRPC {
		lg := logger.Named("grpc-server")
		lg.Info(context.Background(), "gRPC —Å–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
		return nil
	}

	lis, err := net.Listen("tcp", net.JoinHostPort(config.Server.Host, config.Server.GRPCPort))
	if err != nil {
		return fmt.Errorf("listen grpc: %w", err)
	}
	s := grpc.NewServer()
	healthsvc.RegisterService(s)
	reflection.Register(s)

	lifecycle.Append(
		fx.Hook{
			OnStart: func(ctx context.Context) error {
				go func() {
					lg := logger.Named("grpc-server")
					lg.Info(context.Background(), fmt.Sprintf("gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ %s", net.JoinHostPort(config.Server.Host, config.Server.GRPCPort)))
					if err := s.Serve(lis); err != nil {
						lg.Error(context.Background(), "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞", zap.Error(err))
					}
				}()
				return nil
			},
			OnStop: func(ctx context.Context) error {
				lg := logger.Named("grpc-server")
				lg.Info(context.Background(), "gRPC —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
				done := make(chan struct{})
				go func() { s.GracefulStop(); close(done) }()
				select {
				case <-done:
					return nil
				case <-time.After(config.GracefulTimeout * time.Second):
					lg.Info(context.Background(), "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ gRPC —Å–µ—Ä–≤–µ—Ä–∞")
					s.Stop()
					return nil
				}
			},
		},
	)

	return nil
}

func ProvidePgx(config *config.Config) (*postgres.Postgres, error) {
	opt := postgres.NewOptions(
		config.PG.HostPG,
		config.PG.UserPG,
		config.PG.PasswordPG,
		config.PG.DbNamePG,
		config.PG.PortPG,
		config.PG.SchemePG,
		config.IsProduction(),
	)

	connect, err := postgres.New(opt)
	if err != nil {
		return nil, fmt.Errorf("create pgx connection: %w", err)
	}

	return connect, nil
}

// ProvidePool –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç *pgxpool.Pool –¥–ª—è sqlc –∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
func ProvidePool(pg *postgres.Postgres) *pgxpool.Pool {
	pool, ok := pg.Pool.(*pgxpool.Pool)
	if !ok {
		panic("unable to cast pool to *pgxpool.Pool")
	}
	return pool
}

// ProvideTemporal —Å–æ–∑–¥–∞–µ—Ç Temporal —Å–µ—Ä–≤–∏—Å
func ProvideTemporal(lifecycle fx.Lifecycle, config *config.Config, _ *struct{}) *temporal.Service {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ Temporal
	if !config.Server.EnableTemporal {
		lg := logger.Named("temporal-service")
		lg.Info(context.Background(), "Temporal —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–µ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
		return nil // –í–æ–∑–≤—Ä–∞—â–∞–µ–º nil, –Ω–æ –±–µ–∑ –æ—à–∏–±–∫–∏
	}

	serviceConfig := temporal.ServiceConfig{
		Client: temporal.Config{
			Host:      config.Temporal.Host,
			Port:      config.Temporal.Port,
			Namespace: config.Temporal.Namespace,
		},
		Worker: temporal.WorkerConfig{
			TaskQueue: config.Temporal.TaskQueue,
		},
	}

	service, err := temporal.NewService(serviceConfig)
	if err != nil {
		lg := logger.Named("temporal-service")
		lg.Error(context.Background(), "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Temporal —Å–µ—Ä–≤–∏—Å–∞", zap.Error(err))
		return nil
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º lifecycle hooks
	lifecycle.Append(fx.Hook{
		OnStart: func(ctx context.Context) error {
			lg := logger.Named("temporal-service")
			lg.Info(ctx, fmt.Sprintf("–ó–∞–ø—É—Å–∫ Temporal —Å–µ—Ä–≤–∏—Å–∞ (host: %s:%d, namespace: %s)",
				config.Temporal.Host, config.Temporal.Port, config.Temporal.Namespace))
			return service.Start(ctx)
		},
		OnStop: func(ctx context.Context) error {
			lg := logger.Named("temporal-service")
			lg.Info(ctx, "Temporal —Å–µ—Ä–≤–∏—Å –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")
			service.Stop(ctx)
			return nil
		},
	})

	return service
}
