// Code generated by ent, DO NOT EDIT.

package post

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/vovanwin/template/internal/shared/store/gen/predicate"
	"github.com/vovanwin/template/internal/shared/types"
)

// ID filters vertices based on their ID field.
func ID(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...types.UserID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...types.UserID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id types.UserID) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldID, id))
}

// Test applies equality check predicate on the "test" field. It's identical to TestEQ.
func Test(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTest, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// Title1 applies equality check predicate on the "title1" field. It's identical to Title1EQ.
func Title1(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle1, v))
}

// Title3 applies equality check predicate on the "title3" field. It's identical to Title3EQ.
func Title3(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle3, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v types.UserID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUserID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeletedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// TestEQ applies the EQ predicate on the "test" field.
func TestEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTest, v))
}

// TestNEQ applies the NEQ predicate on the "test" field.
func TestNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTest, v))
}

// TestIn applies the In predicate on the "test" field.
func TestIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTest, vs...))
}

// TestNotIn applies the NotIn predicate on the "test" field.
func TestNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTest, vs...))
}

// TestGT applies the GT predicate on the "test" field.
func TestGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTest, v))
}

// TestGTE applies the GTE predicate on the "test" field.
func TestGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTest, v))
}

// TestLT applies the LT predicate on the "test" field.
func TestLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTest, v))
}

// TestLTE applies the LTE predicate on the "test" field.
func TestLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTest, v))
}

// TestContains applies the Contains predicate on the "test" field.
func TestContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTest, v))
}

// TestHasPrefix applies the HasPrefix predicate on the "test" field.
func TestHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTest, v))
}

// TestHasSuffix applies the HasSuffix predicate on the "test" field.
func TestHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTest, v))
}

// TestEqualFold applies the EqualFold predicate on the "test" field.
func TestEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTest, v))
}

// TestContainsFold applies the ContainsFold predicate on the "test" field.
func TestContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTest, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle, v))
}

// Title1EQ applies the EQ predicate on the "title1" field.
func Title1EQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle1, v))
}

// Title1NEQ applies the NEQ predicate on the "title1" field.
func Title1NEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle1, v))
}

// Title1In applies the In predicate on the "title1" field.
func Title1In(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle1, vs...))
}

// Title1NotIn applies the NotIn predicate on the "title1" field.
func Title1NotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle1, vs...))
}

// Title1GT applies the GT predicate on the "title1" field.
func Title1GT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle1, v))
}

// Title1GTE applies the GTE predicate on the "title1" field.
func Title1GTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle1, v))
}

// Title1LT applies the LT predicate on the "title1" field.
func Title1LT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle1, v))
}

// Title1LTE applies the LTE predicate on the "title1" field.
func Title1LTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle1, v))
}

// Title1Contains applies the Contains predicate on the "title1" field.
func Title1Contains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle1, v))
}

// Title1HasPrefix applies the HasPrefix predicate on the "title1" field.
func Title1HasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle1, v))
}

// Title1HasSuffix applies the HasSuffix predicate on the "title1" field.
func Title1HasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle1, v))
}

// Title1EqualFold applies the EqualFold predicate on the "title1" field.
func Title1EqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle1, v))
}

// Title1ContainsFold applies the ContainsFold predicate on the "title1" field.
func Title1ContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle1, v))
}

// Title3EQ applies the EQ predicate on the "title3" field.
func Title3EQ(v string) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldTitle3, v))
}

// Title3NEQ applies the NEQ predicate on the "title3" field.
func Title3NEQ(v string) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldTitle3, v))
}

// Title3In applies the In predicate on the "title3" field.
func Title3In(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldTitle3, vs...))
}

// Title3NotIn applies the NotIn predicate on the "title3" field.
func Title3NotIn(vs ...string) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldTitle3, vs...))
}

// Title3GT applies the GT predicate on the "title3" field.
func Title3GT(v string) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldTitle3, v))
}

// Title3GTE applies the GTE predicate on the "title3" field.
func Title3GTE(v string) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldTitle3, v))
}

// Title3LT applies the LT predicate on the "title3" field.
func Title3LT(v string) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldTitle3, v))
}

// Title3LTE applies the LTE predicate on the "title3" field.
func Title3LTE(v string) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldTitle3, v))
}

// Title3Contains applies the Contains predicate on the "title3" field.
func Title3Contains(v string) predicate.Post {
	return predicate.Post(sql.FieldContains(FieldTitle3, v))
}

// Title3HasPrefix applies the HasPrefix predicate on the "title3" field.
func Title3HasPrefix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasPrefix(FieldTitle3, v))
}

// Title3HasSuffix applies the HasSuffix predicate on the "title3" field.
func Title3HasSuffix(v string) predicate.Post {
	return predicate.Post(sql.FieldHasSuffix(FieldTitle3, v))
}

// Title3EqualFold applies the EqualFold predicate on the "title3" field.
func Title3EqualFold(v string) predicate.Post {
	return predicate.Post(sql.FieldEqualFold(FieldTitle3, v))
}

// Title3ContainsFold applies the ContainsFold predicate on the "title3" field.
func Title3ContainsFold(v string) predicate.Post {
	return predicate.Post(sql.FieldContainsFold(FieldTitle3, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v types.UserID) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v types.UserID) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...types.UserID) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...types.UserID) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUserID, vs...))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldDeletedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.Post {
	return predicate.Post(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.Post {
	return predicate.Post(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Post {
	return predicate.Post(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Post {
	return predicate.Post(sql.FieldLTE(FieldCreatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Post {
	return predicate.Post(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Post) predicate.Post {
	return predicate.Post(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Post) predicate.Post {
	return predicate.Post(sql.NotPredicates(p))
}
