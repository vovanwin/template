// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/vovanwin/template/internal/shared/store/gen/users"
	"github.com/vovanwin/template/internal/shared/types"
)

// UsersCreate is the builder for creating a Users entity.
type UsersCreate struct {
	config
	mutation *UsersMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetLogin sets the "login" field.
func (uc *UsersCreate) SetLogin(s string) *UsersCreate {
	uc.mutation.SetLogin(s)
	return uc
}

// SetPassword sets the "password" field.
func (uc *UsersCreate) SetPassword(s string) *UsersCreate {
	uc.mutation.SetPassword(s)
	return uc
}

// SetDeletedAt sets the "deleted_at" field.
func (uc *UsersCreate) SetDeletedAt(t time.Time) *UsersCreate {
	uc.mutation.SetDeletedAt(t)
	return uc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uc *UsersCreate) SetNillableDeletedAt(t *time.Time) *UsersCreate {
	if t != nil {
		uc.SetDeletedAt(*t)
	}
	return uc
}

// SetCreatedAt sets the "created_at" field.
func (uc *UsersCreate) SetCreatedAt(t time.Time) *UsersCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uc *UsersCreate) SetNillableCreatedAt(t *time.Time) *UsersCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the "updated_at" field.
func (uc *UsersCreate) SetUpdatedAt(t time.Time) *UsersCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (uc *UsersCreate) SetNillableUpdatedAt(t *time.Time) *UsersCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// SetID sets the "id" field.
func (uc *UsersCreate) SetID(ti types.UserID) *UsersCreate {
	uc.mutation.SetID(ti)
	return uc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (uc *UsersCreate) SetNillableID(ti *types.UserID) *UsersCreate {
	if ti != nil {
		uc.SetID(*ti)
	}
	return uc
}

// Mutation returns the UsersMutation object of the builder.
func (uc *UsersCreate) Mutation() *UsersMutation {
	return uc.mutation
}

// Save creates the Users in the database.
func (uc *UsersCreate) Save(ctx context.Context) (*Users, error) {
	uc.defaults()
	return withHooks(ctx, uc.sqlSave, uc.mutation, uc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UsersCreate) SaveX(ctx context.Context) *Users {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (uc *UsersCreate) Exec(ctx context.Context) error {
	_, err := uc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uc *UsersCreate) ExecX(ctx context.Context) {
	if err := uc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uc *UsersCreate) defaults() {
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := users.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := users.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	if _, ok := uc.mutation.ID(); !ok {
		v := users.DefaultID()
		uc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uc *UsersCreate) check() error {
	if _, ok := uc.mutation.Login(); !ok {
		return &ValidationError{Name: "login", err: errors.New(`gen: missing required field "Users.login"`)}
	}
	if _, ok := uc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`gen: missing required field "Users.password"`)}
	}
	if v, ok := uc.mutation.Password(); ok {
		if err := users.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`gen: validator failed for field "Users.password": %w`, err)}
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`gen: missing required field "Users.created_at"`)}
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`gen: missing required field "Users.updated_at"`)}
	}
	if v, ok := uc.mutation.ID(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`gen: validator failed for field "Users.id": %w`, err)}
		}
	}
	return nil
}

func (uc *UsersCreate) sqlSave(ctx context.Context) (*Users, error) {
	if err := uc.check(); err != nil {
		return nil, err
	}
	_node, _spec := uc.createSpec()
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*types.UserID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	uc.mutation.id = &_node.ID
	uc.mutation.done = true
	return _node, nil
}

func (uc *UsersCreate) createSpec() (*Users, *sqlgraph.CreateSpec) {
	var (
		_node = &Users{config: uc.config}
		_spec = sqlgraph.NewCreateSpec(users.Table, sqlgraph.NewFieldSpec(users.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = uc.conflict
	if id, ok := uc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := uc.mutation.Login(); ok {
		_spec.SetField(users.FieldLogin, field.TypeString, value)
		_node.Login = value
	}
	if value, ok := uc.mutation.Password(); ok {
		_spec.SetField(users.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := uc.mutation.DeletedAt(); ok {
		_spec.SetField(users.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.SetField(users.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.SetField(users.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Users.Create().
//		SetLogin(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UsersUpsert) {
//			SetLogin(v+v).
//		}).
//		Exec(ctx)
func (uc *UsersCreate) OnConflict(opts ...sql.ConflictOption) *UsersUpsertOne {
	uc.conflict = opts
	return &UsersUpsertOne{
		create: uc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (uc *UsersCreate) OnConflictColumns(columns ...string) *UsersUpsertOne {
	uc.conflict = append(uc.conflict, sql.ConflictColumns(columns...))
	return &UsersUpsertOne{
		create: uc,
	}
}

type (
	// UsersUpsertOne is the builder for "upsert"-ing
	//  one Users node.
	UsersUpsertOne struct {
		create *UsersCreate
	}

	// UsersUpsert is the "OnConflict" setter.
	UsersUpsert struct {
		*sql.UpdateSet
	}
)

// SetLogin sets the "login" field.
func (u *UsersUpsert) SetLogin(v string) *UsersUpsert {
	u.Set(users.FieldLogin, v)
	return u
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UsersUpsert) UpdateLogin() *UsersUpsert {
	u.SetExcluded(users.FieldLogin)
	return u
}

// SetPassword sets the "password" field.
func (u *UsersUpsert) SetPassword(v string) *UsersUpsert {
	u.Set(users.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UsersUpsert) UpdatePassword() *UsersUpsert {
	u.SetExcluded(users.FieldPassword)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UsersUpsert) SetDeletedAt(v time.Time) *UsersUpsert {
	u.Set(users.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UsersUpsert) UpdateDeletedAt() *UsersUpsert {
	u.SetExcluded(users.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UsersUpsert) ClearDeletedAt() *UsersUpsert {
	u.SetNull(users.FieldDeletedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UsersUpsert) SetCreatedAt(v time.Time) *UsersUpsert {
	u.Set(users.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UsersUpsert) UpdateCreatedAt() *UsersUpsert {
	u.SetExcluded(users.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UsersUpsert) SetUpdatedAt(v time.Time) *UsersUpsert {
	u.Set(users.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UsersUpsert) UpdateUpdatedAt() *UsersUpsert {
	u.SetExcluded(users.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(users.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UsersUpsertOne) UpdateNewValues() *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(users.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Users.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UsersUpsertOne) Ignore() *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UsersUpsertOne) DoNothing() *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UsersCreate.OnConflict
// documentation for more info.
func (u *UsersUpsertOne) Update(set func(*UsersUpsert)) *UsersUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UsersUpsert{UpdateSet: update})
	}))
	return u
}

// SetLogin sets the "login" field.
func (u *UsersUpsertOne) SetLogin(v string) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateLogin() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateLogin()
	})
}

// SetPassword sets the "password" field.
func (u *UsersUpsertOne) SetPassword(v string) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdatePassword() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdatePassword()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UsersUpsertOne) SetDeletedAt(v time.Time) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateDeletedAt() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UsersUpsertOne) ClearDeletedAt() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UsersUpsertOne) SetCreatedAt(v time.Time) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateCreatedAt() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UsersUpsertOne) SetUpdatedAt(v time.Time) *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UsersUpsertOne) UpdateUpdatedAt() *UsersUpsertOne {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UsersUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UsersCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UsersUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UsersUpsertOne) ID(ctx context.Context) (id types.UserID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("gen: UsersUpsertOne.ID is not supported by MySQL driver. Use UsersUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UsersUpsertOne) IDX(ctx context.Context) types.UserID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UsersCreateBulk is the builder for creating many Users entities in bulk.
type UsersCreateBulk struct {
	config
	err      error
	builders []*UsersCreate
	conflict []sql.ConflictOption
}

// Save creates the Users entities in the database.
func (ucb *UsersCreateBulk) Save(ctx context.Context) ([]*Users, error) {
	if ucb.err != nil {
		return nil, ucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucb.builders))
	nodes := make([]*Users, len(ucb.builders))
	mutators := make([]Mutator, len(ucb.builders))
	for i := range ucb.builders {
		func(i int, root context.Context) {
			builder := ucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UsersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucb *UsersCreateBulk) SaveX(ctx context.Context) []*Users {
	v, err := ucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucb *UsersCreateBulk) Exec(ctx context.Context) error {
	_, err := ucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucb *UsersCreateBulk) ExecX(ctx context.Context) {
	if err := ucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Users.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UsersUpsert) {
//			SetLogin(v+v).
//		}).
//		Exec(ctx)
func (ucb *UsersCreateBulk) OnConflict(opts ...sql.ConflictOption) *UsersUpsertBulk {
	ucb.conflict = opts
	return &UsersUpsertBulk{
		create: ucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ucb *UsersCreateBulk) OnConflictColumns(columns ...string) *UsersUpsertBulk {
	ucb.conflict = append(ucb.conflict, sql.ConflictColumns(columns...))
	return &UsersUpsertBulk{
		create: ucb,
	}
}

// UsersUpsertBulk is the builder for "upsert"-ing
// a bulk of Users nodes.
type UsersUpsertBulk struct {
	create *UsersCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(users.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UsersUpsertBulk) UpdateNewValues() *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(users.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Users.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UsersUpsertBulk) Ignore() *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UsersUpsertBulk) DoNothing() *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UsersCreateBulk.OnConflict
// documentation for more info.
func (u *UsersUpsertBulk) Update(set func(*UsersUpsert)) *UsersUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UsersUpsert{UpdateSet: update})
	}))
	return u
}

// SetLogin sets the "login" field.
func (u *UsersUpsertBulk) SetLogin(v string) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetLogin(v)
	})
}

// UpdateLogin sets the "login" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateLogin() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateLogin()
	})
}

// SetPassword sets the "password" field.
func (u *UsersUpsertBulk) SetPassword(v string) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdatePassword() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdatePassword()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *UsersUpsertBulk) SetDeletedAt(v time.Time) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateDeletedAt() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *UsersUpsertBulk) ClearDeletedAt() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.ClearDeletedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UsersUpsertBulk) SetCreatedAt(v time.Time) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateCreatedAt() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UsersUpsertBulk) SetUpdatedAt(v time.Time) *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UsersUpsertBulk) UpdateUpdatedAt() *UsersUpsertBulk {
	return u.Update(func(s *UsersUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *UsersUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("gen: OnConflict was set for builder %d. Set it on the UsersCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("gen: missing options for UsersCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UsersUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
