// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/service_mock.gen.go -package=usersServiceMocks
//

// Package usersServiceMocks is a generated GoMock package.
package usersServiceMocks

import (
	context "context"
	reflect "reflect"

	usersGenv1 "github.com/vovanwin/template/internal/module/users/controller/gen"
	gomock "go.uber.org/mock/gomock"
)

// MockUsersService is a mock of UsersService interface.
type MockUsersService struct {
	ctrl     *gomock.Controller
	recorder *MockUsersServiceMockRecorder
}

// MockUsersServiceMockRecorder is the mock recorder for MockUsersService.
type MockUsersServiceMockRecorder struct {
	mock *MockUsersService
}

// NewMockUsersService creates a new mock instance.
func NewMockUsersService(ctrl *gomock.Controller) *MockUsersService {
	mock := &MockUsersService{ctrl: ctrl}
	mock.recorder = &MockUsersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersService) EXPECT() *MockUsersServiceMockRecorder {
	return m.recorder
}

// GetMe mocks base method.
func (m *MockUsersService) GetMe(ctx context.Context) (usersGenv1.UserMe, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMe", ctx)
	ret0, _ := ret[0].(usersGenv1.UserMe)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMe indicates an expected call of GetMe.
func (mr *MockUsersServiceMockRecorder) GetMe(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMe", reflect.TypeOf((*MockUsersService)(nil).GetMe), ctx)
}
