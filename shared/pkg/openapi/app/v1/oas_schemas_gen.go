// Code generated by ogen, DO NOT EDIT.

package app_v1

import (
	"fmt"
	"time"

	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/AuthToken
type AuthToken struct {
	// Access JWT токен для авторизации.
	AccessToken string `json:"access_token"`
	// Refresh токен для обновления access токена.
	RefreshToken string `json:"refresh_token"`
	// ID пользователя.
	UserID uuid.UUID `json:"user_id"`
	// Email пользователя.
	UserEmail string `json:"user_email"`
}

// GetAccessToken returns the value of AccessToken.
func (s *AuthToken) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *AuthToken) GetRefreshToken() string {
	return s.RefreshToken
}

// GetUserID returns the value of UserID.
func (s *AuthToken) GetUserID() uuid.UUID {
	return s.UserID
}

// GetUserEmail returns the value of UserEmail.
func (s *AuthToken) GetUserEmail() string {
	return s.UserEmail
}

// SetAccessToken sets the value of AccessToken.
func (s *AuthToken) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *AuthToken) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// SetUserID sets the value of UserID.
func (s *AuthToken) SetUserID(val uuid.UUID) {
	s.UserID = val
}

// SetUserEmail sets the value of UserEmail.
func (s *AuthToken) SetUserEmail(val string) {
	s.UserEmail = val
}

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

// Represents error object.
// Ref: #/components/schemas/Error
type Error struct {
	Code    int64  `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int64 {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int64) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

// Ref: #/components/schemas/LoginRequest
type LoginRequest struct {
	// Email пользователя для входа.
	Email string `json:"email"`
	// Пароль пользователя.
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *LoginRequest) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *LoginRequest) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *LoginRequest) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *LoginRequest) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/LogoutResponse
type LogoutResponse struct {
	// Сообщение об успешном выходе.
	Message string `json:"message"`
}

// GetMessage returns the value of Message.
func (s *LogoutResponse) GetMessage() string {
	return s.Message
}

// SetMessage sets the value of Message.
func (s *LogoutResponse) SetMessage(val string) {
	s.Message = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTestWorkflowRequestAdditionalData returns new OptTestWorkflowRequestAdditionalData with value set to v.
func NewOptTestWorkflowRequestAdditionalData(v TestWorkflowRequestAdditionalData) OptTestWorkflowRequestAdditionalData {
	return OptTestWorkflowRequestAdditionalData{
		Value: v,
		Set:   true,
	}
}

// OptTestWorkflowRequestAdditionalData is optional TestWorkflowRequestAdditionalData.
type OptTestWorkflowRequestAdditionalData struct {
	Value TestWorkflowRequestAdditionalData
	Set   bool
}

// IsSet returns true if OptTestWorkflowRequestAdditionalData was set.
func (o OptTestWorkflowRequestAdditionalData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTestWorkflowRequestAdditionalData) Reset() {
	var v TestWorkflowRequestAdditionalData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTestWorkflowRequestAdditionalData) SetTo(v TestWorkflowRequestAdditionalData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTestWorkflowRequestAdditionalData) Get() (v TestWorkflowRequestAdditionalData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTestWorkflowRequestAdditionalData) Or(d TestWorkflowRequestAdditionalData) TestWorkflowRequestAdditionalData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/RefreshRequest
type RefreshRequest struct {
	// Рефреш токен, чтобы получить новый access и refresh токены.
	RefreshToken string `json:"refresh_token"`
}

// GetRefreshToken returns the value of RefreshToken.
func (s *RefreshRequest) GetRefreshToken() string {
	return s.RefreshToken
}

// SetRefreshToken sets the value of RefreshToken.
func (s *RefreshRequest) SetRefreshToken(val string) {
	s.RefreshToken = val
}

// Ref: #/components/schemas/TestWorkflowRequest
type TestWorkflowRequest struct {
	// ID пользователя для тестирования.
	UserID uuid.UUID `json:"user_id"`
	// Email пользователя.
	Email string `json:"email"`
	// Имя пользователя.
	Name string `json:"name"`
	// Дополнительные данные пользователя.
	AdditionalData OptTestWorkflowRequestAdditionalData `json:"additional_data"`
}

// GetUserID returns the value of UserID.
func (s *TestWorkflowRequest) GetUserID() uuid.UUID {
	return s.UserID
}

// GetEmail returns the value of Email.
func (s *TestWorkflowRequest) GetEmail() string {
	return s.Email
}

// GetName returns the value of Name.
func (s *TestWorkflowRequest) GetName() string {
	return s.Name
}

// GetAdditionalData returns the value of AdditionalData.
func (s *TestWorkflowRequest) GetAdditionalData() OptTestWorkflowRequestAdditionalData {
	return s.AdditionalData
}

// SetUserID sets the value of UserID.
func (s *TestWorkflowRequest) SetUserID(val uuid.UUID) {
	s.UserID = val
}

// SetEmail sets the value of Email.
func (s *TestWorkflowRequest) SetEmail(val string) {
	s.Email = val
}

// SetName sets the value of Name.
func (s *TestWorkflowRequest) SetName(val string) {
	s.Name = val
}

// SetAdditionalData sets the value of AdditionalData.
func (s *TestWorkflowRequest) SetAdditionalData(val OptTestWorkflowRequestAdditionalData) {
	s.AdditionalData = val
}

// Дополнительные данные пользователя.
type TestWorkflowRequestAdditionalData map[string]jx.Raw

func (s *TestWorkflowRequestAdditionalData) init() TestWorkflowRequestAdditionalData {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/TestWorkflowResponse
type TestWorkflowResponse struct {
	// Статус запуска workflow.
	Success bool `json:"success"`
	// ID запущенного workflow.
	WorkflowID string `json:"workflow_id"`
	// ID запуска workflow.
	RunID OptString `json:"run_id"`
	// Сообщение о результате.
	Message string `json:"message"`
}

// GetSuccess returns the value of Success.
func (s *TestWorkflowResponse) GetSuccess() bool {
	return s.Success
}

// GetWorkflowID returns the value of WorkflowID.
func (s *TestWorkflowResponse) GetWorkflowID() string {
	return s.WorkflowID
}

// GetRunID returns the value of RunID.
func (s *TestWorkflowResponse) GetRunID() OptString {
	return s.RunID
}

// GetMessage returns the value of Message.
func (s *TestWorkflowResponse) GetMessage() string {
	return s.Message
}

// SetSuccess sets the value of Success.
func (s *TestWorkflowResponse) SetSuccess(val bool) {
	s.Success = val
}

// SetWorkflowID sets the value of WorkflowID.
func (s *TestWorkflowResponse) SetWorkflowID(val string) {
	s.WorkflowID = val
}

// SetRunID sets the value of RunID.
func (s *TestWorkflowResponse) SetRunID(val OptString) {
	s.RunID = val
}

// SetMessage sets the value of Message.
func (s *TestWorkflowResponse) SetMessage(val string) {
	s.Message = val
}

// Ref: #/components/schemas/UserMe
type UserMe struct {
	// Токен для авторизации.
	ID uuid.UUID `json:"id"`
	// Email пользователя, а также его логин. Может не быть
	// почтовым адресом.
	Email string `json:"email"`
	// Роль текущего пользователя.
	Role OptString `json:"role"`
	// Тенант текущего пользователя.
	Tenant string `json:"tenant"`
	// Время создания пользователя.
	CreatedAt time.Time `json:"created_at"`
	// Тут хранятся все настройки пользователя для
	// фронтенда, фильтры, таймзона и тд.
	Settings string `json:"settings"`
	// Разделы меню доступные пользователю (сейчас
	// захардкожено).
	Components []string `json:"components"`
}

// GetID returns the value of ID.
func (s *UserMe) GetID() uuid.UUID {
	return s.ID
}

// GetEmail returns the value of Email.
func (s *UserMe) GetEmail() string {
	return s.Email
}

// GetRole returns the value of Role.
func (s *UserMe) GetRole() OptString {
	return s.Role
}

// GetTenant returns the value of Tenant.
func (s *UserMe) GetTenant() string {
	return s.Tenant
}

// GetCreatedAt returns the value of CreatedAt.
func (s *UserMe) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetSettings returns the value of Settings.
func (s *UserMe) GetSettings() string {
	return s.Settings
}

// GetComponents returns the value of Components.
func (s *UserMe) GetComponents() []string {
	return s.Components
}

// SetID sets the value of ID.
func (s *UserMe) SetID(val uuid.UUID) {
	s.ID = val
}

// SetEmail sets the value of Email.
func (s *UserMe) SetEmail(val string) {
	s.Email = val
}

// SetRole sets the value of Role.
func (s *UserMe) SetRole(val OptString) {
	s.Role = val
}

// SetTenant sets the value of Tenant.
func (s *UserMe) SetTenant(val string) {
	s.Tenant = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *UserMe) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetSettings sets the value of Settings.
func (s *UserMe) SetSettings(val string) {
	s.Settings = val
}

// SetComponents sets the value of Components.
func (s *UserMe) SetComponents(val []string) {
	s.Components = val
}
