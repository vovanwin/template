// Code generated by ogen, DO NOT EDIT.

package app_v1

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AuthLoginPost implements POST /auth/login operation.
	//
	// Авторизация пользователя по email и паролю.
	//
	// POST /auth/login
	AuthLoginPost(ctx context.Context, req *LoginRequest, params AuthLoginPostParams) (*AuthToken, error)
	// AuthLogoutPost implements POST /auth/logout operation.
	//
	// Выход из системы (logout).
	//
	// POST /auth/logout
	AuthLogoutPost(ctx context.Context, params AuthLogoutPostParams) (*LogoutResponse, error)
	// AuthMeGet implements GET /auth/me operation.
	//
	// Информация о текущем пользователе.
	//
	// GET /auth/me
	AuthMeGet(ctx context.Context, params AuthMeGetParams) (*UserMe, error)
	// AuthRefreshPost implements POST /auth/refresh operation.
	//
	// Обновление токенов с помощью refresh токена.
	//
	// POST /auth/refresh
	AuthRefreshPost(ctx context.Context, req *RefreshRequest, params AuthRefreshPostParams) (*AuthToken, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
