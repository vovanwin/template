version: '3'

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç–∞
vars:
  DEV_TOOLS: |
    github.com/sqlc-dev/sqlc/cmd/sqlc@latest
    mvdan.cc/gofumpt@v0.8.0
    github.com/daixiang0/gci@v0.13.6
    github.com/ogen-go/ogen/cmd/ogen@v1.14.0
    github.com/mikefarah/yq/v4@v4.45.2
    github.com/bufbuild/buf/cmd/buf@v1.53.0
    google.golang.org/protobuf/cmd/protoc-gen-go@v1.36.6
    google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.5.1
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@v2.26.3
    github.com/envoyproxy/protoc-gen-validate@v1.2.1
    github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@v2.26.3
    github.com/vektra/mockery/v2@v2.53.3

  DOCKER_COMPOSE_PATHS: |
    -f ./deployments/local/docker-compose.yml
#    -f ./deployments/local/docker-compose.temporal.yml
  #    -f ./deployments/local/docker-compose.jasper.yml
  #    -f ./deployments/local/docker-compose.metrics.yml

  DOCKER_COMPOSE_CMD: docker-compose  {{range $line := .DOCKER_COMPOSE_PATHS | splitLines -}}
    {{$line}}
    {{end}}

  GO_VERSION: '1.24'
  GOLANGCI_LINT_VERSION: 'v2.3.0'

  BIN_DIR: '{{.ROOT_DIR}}/bin'
  SQLC: '{{.BIN_DIR}}/sqlc'
  GOLANGCI_LINT: '{{.BIN_DIR}}/golangci-lint'
  GCI: '{{.BIN_DIR}}/gci'
  GOFUMPT: '{{.BIN_DIR}}/gofumpt'
  BUF: '{{.BIN_DIR}}/buf'
  OGEN: '{{.BIN_DIR}}/ogen'
  YQ: '{{.BIN_DIR}}/yq'
  PROTOC_GEN_GO: '{{.BIN_DIR}}/protoc-gen-go'
  PROTOC_GEN_GO_GRPC: '{{.BIN_DIR}}/protoc-gen-go-grpc'
  PROTOC_GEN_GRPC_GATEWAY: '{{.BIN_DIR}}/protoc-gen-grpc-gateway'
  PROTOC_GEN_VALIDATE: '{{.BIN_DIR}}/protoc-gen-validate'
  PROTOC_GEN_OPENAPIV2: '{{.BIN_DIR}}/protoc-gen-openapiv2'
  GRPCURL: '{{.BIN_DIR}}/grpcurl'
  MOCKERY: "{{.BIN_DIR}}/mockery"

  OPEN_API_WEATHER_V1_BASE: '{{.ROOT_DIR}}/shared/api/weather/v1/weather.openapi.yaml'
  OPEN_API_WEATHER_V1_BUNDLE: '{{.ROOT_DIR}}/shared/api/bundles/weather.openapi.v1.bundle.yaml'
  OPEN_API_FILES: '{{.ROOT_DIR}}/shared/api/bundles'

  MODULES: app platform shared

tasks:

  format:
    desc: "–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ–µ–∫—Ç gofumpt + gci"
    deps: [ install ]
    cmds:
      - |
        echo "üßº –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ gofumpt ..."
        
        for module in {{.MODULES}}; do
          if [ -d "$module" ]; then
            echo "üßº –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º $module"
            find $module -type f -name '*.go' ! -path '*/mocks/*' -exec {{.GOFUMPT}} -extra -w {} +
          fi
        done
      - |
        echo "üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã —á–µ—Ä–µ–∑ gci ..."
        
        for module in {{.MODULES}}; do
          if [ -d "$module" ]; then
            echo "üéØ –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ $module"
            find $module -type f -name '*.go' ! -path '*/mocks/*' -exec {{.GCI}} write -s standard -s default -s "prefix(github.com/olezhek28/microservices-course-examples/)" {} +
          fi
        done


  lint:
    desc: "–ó–∞–ø—É—Å–∫–∞–µ—Ç golangci-lint –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"
    deps: [ install ]
    vars:
      MODULES: '{{.MODULES}}'
      GOLANGCI_LINT: '{{.GOLANGCI_LINT}}'
    cmds:
      - |
        set -e
        ERR=0
        echo "üîç –õ–∏–Ω—Ç–∏–º –≤—Å–µ –º–æ–¥—É–ª–∏ ..."
        for mod in {{.MODULES}}; do
          if [ -d "$mod" ]; then
            echo "üîç –õ–∏–Ω—Ç–∏–º $mod module"
            {{.GOLANGCI_LINT}} run $mod/... --config=.golangci.yml || ERR=1
          fi
        done
        exit $ERR


  ogen:gen:
    desc: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Go-–∫–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö OpenAPI-–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π —Å x-ogen"
    deps: [ install ]
    cmds:
      - '{{.OGEN}} --target shared/pkg/openapi/app/v1 --package app_v1 --config config.yml  --clean shared/api/app/v1/app.v1.swagger.yml'
  

  deps:update:
    desc: "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.mod –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"
    cmds:
      - |
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.work"
        go work sync
        echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ go.mod –≤–æ –≤—Å–µ—Ö –º–æ–¥—É–ª—è—Ö"
        for mod in {{.MODULES}}; do
          if [ -d "$mod" ]; then
            echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ $mod"
            (cd "$mod" && go mod tidy -compat=1.24) || exit 1
          fi
        done



  proto:lint:
    deps: [ install ]
    desc: –ü—Ä–æ–≤–µ—Ä–∫–∞ .proto-—Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—é
    dir: shared/proto
    cmds:
      - '{{.BUF}} lint'

  proto:gen:
    deps: [ install, proto:lint ]
    desc: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Go-–∫–æ–¥–∞ –∏–∑ .proto
    dir: shared/proto
    cmds:
      - '{{.BUF}} generate'

  mockery:gen:
    desc: "–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é mockery"
    deps: [ install ]
    cmds:
      - |
        echo 'üß™ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤...'
        {{.MOCKERY}}
        

  deps:
    dotenv: ['.env']
    desc: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã - –∑–∞–ø—É—Å—Ç–∏—Ç—å
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} up -d {{.CLI_ARGS}}"

  deps:cmd:
    dotenv: ['.env']
    desc: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã - –≤—ã–ø–æ–ª–Ω–∏—Ç—å cli –∫–æ–º–Ω–¥—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} {{.CLI_ARGS}}"   # –ø—Ä–∏–º–µ—Ä: task deps:cmd -- exec postgres bash

  deps:status:
    dotenv: ['.env']
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} ps -a"

  deps:logs:
    dotenv: ['.env']
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} logs {{.CLI_ARGS}}"

  deps:stop:
    dotenv: ['.env']
    desc: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    cmds:
      - "{{.DOCKER_COMPOSE_CMD}} stop"

  deps:reset-psql:
    dotenv: ['.env']
    cmds:
      - task: deps:reset
        vars:
          SERVICES: postgres

  deps:reset:
    dotenv: ['.env']
    cmds:
      - for: { var: SERVICES }
        cmd: "{{.DOCKER_COMPOSE_CMD}} rm -fsv {{.ITEM}}"
      - for: { var: SERVICES }
        cmd: "{{.DOCKER_COMPOSE_CMD}} up -d {{.ITEM}}"

  deps:app:
    dotenv: [ '.env' ]
    cmds:
      - go run app/main.go

  deps:app:migration:
    dotenv: [ '.env' ]
    cmds:
      - go run app/main.go migration up

  deps:temporal:
    dotenv: [ '.env' ]
    cmds:
      - temporal server start-dev

  install:
    desc: "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π"
    cmds:
      - mkdir -p {{.BIN_DIR}}
      - echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
      - for: { var: DEV_TOOLS }
        cmd: GOBIN="{{.BIN_DIR}}"  go install "{{ .ITEM }}"
      - |
        [ -f {{.GOLANGCI_LINT}} ] || {
          echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º golangci-lint {{.GOLANGCI_LINT_VERSION}}..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s {{.GOLANGCI_LINT_VERSION}}
        }

  sql:
    - echo "SQLC"
    - "{{.SQLC}} generate file app/sqlc.yaml"
  templ:
    - echo "SQLC"
    - "templ generate ./... "