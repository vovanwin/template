/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
 * OpenAPI spec version: v1
 */
import {
  createMutation,
  createQuery
} from '@tanstack/svelte-query';
import type {
  CreateMutationOptions,
  CreateMutationResult,
  CreateQueryOptions,
  CreateQueryResult,
  DataTag,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey
} from '@tanstack/svelte-query';

import type {
  AuthToken,
  Error,
  LoginRequest,
  LogoutResponse,
  UserMe
} from '.././models';

import { apiClient } from '.././client';




/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @summary —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */
export const getAuthMe = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<UserMe>(
      {url: `http://localhost:8080/auth/me`, method: 'GET', signal
    },
      );
    }
  

export const getGetAuthMeQueryKey = () => {
    return [`http://localhost:8080/auth/me`] as const;
    }

    
export const getGetAuthMeQueryOptions = <TData = Awaited<ReturnType<typeof getAuthMe>>, TError = Error>( options?: { query?:Partial<CreateQueryOptions<Awaited<ReturnType<typeof getAuthMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthMe>>> = ({ signal }) => getAuthMe(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as CreateQueryOptions<Awaited<ReturnType<typeof getAuthMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthMeQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthMe>>>
export type GetAuthMeQueryError = Error


/**
 * @summary —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
 */

export function createGetAuthMe<TData = Awaited<ReturnType<typeof getAuthMe>>, TError = Error>(
  options?: { query?:Partial<CreateQueryOptions<Awaited<ReturnType<typeof getAuthMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ): CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthMeQueryOptions(options)

  const query = createQuery(queryOptions , queryClient) as CreateQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
 * @summary –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
 */
export const postAuthLogin = (
    loginRequest: LoginRequest,
 signal?: AbortSignal
) => {
      
      
      return apiClient<AuthToken>(
      {url: `http://localhost:8080/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest, signal
    },
      );
    }
  


export const getPostAuthLoginMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, }
): CreateMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = LoginRequest
    export type PostAuthLoginMutationError = Error

    /**
 * @summary –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
 */
export const createPostAuthLogin = <TError = Error,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof postAuthLogin>>, TError,{data: LoginRequest}, TContext>, }
 , queryClient?: QueryClient): CreateMutationResult<
        Awaited<ReturnType<typeof postAuthLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return createMutation(mutationOptions , queryClient);
    }
    /**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (logout)
 * @summary –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
export const postAuthLogout = (
    
 signal?: AbortSignal
) => {
      
      
      return apiClient<LogoutResponse>(
      {url: `http://localhost:8080/auth/logout`, method: 'POST', signal
    },
      );
    }
  


export const getPostAuthLogoutMutationOptions = <TError = Error,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, }
): CreateMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext> => {

const mutationKey = ['postAuthLogout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogout>>, void> = () => {
          

          return  postAuthLogout()
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogout>>>
    
    export type PostAuthLogoutMutationError = Error

    /**
 * @summary –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 */
export const createPostAuthLogout = <TError = Error,
    TContext = unknown>(options?: { mutation?:CreateMutationOptions<Awaited<ReturnType<typeof postAuthLogout>>, TError,void, TContext>, }
 , queryClient?: QueryClient): CreateMutationResult<
        Awaited<ReturnType<typeof postAuthLogout>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getPostAuthLogoutMutationOptions(options);

      return createMutation(mutationOptions , queryClient);
    }
    